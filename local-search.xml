<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>浅谈Spring</title>
    <link href="./2020/08/01/%E6%B5%85%E8%B0%88Spring/"/>
    <url>./2020/08/01/%E6%B5%85%E8%B0%88Spring/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是Spring"><a href="#什么是Spring" class="headerlink" title="什么是Spring"></a>什么是Spring</h2><p>Spring 是一个轻量级Java开发开源框架，是为了解决企业级应用开发的复杂性而创建的，简化开发过程。Spring是⼀个轻量级的控制反转（IoC）和⾯向切⾯（AOP）的容器框架。</p><h2 id="Spring体系结构"><a href="#Spring体系结构" class="headerlink" title="Spring体系结构"></a>Spring体系结构</h2><p><img src="https://gitee.com/jiantian99/Images-Hosting/raw/master/img/20200809173931.png" srcset="./img/loading.gif" alt></p><h2 id="IOC和DI"><a href="#IOC和DI" class="headerlink" title="IOC和DI"></a>IOC和DI</h2><h3 id="IOC：控制反转"><a href="#IOC：控制反转" class="headerlink" title="IOC：控制反转"></a>IOC：控制反转</h3><p>控制反转即控制权的转移，是Spring框架的核心，用来消减程序的耦合问题。</p><p>在传统开发模式下，调用者通过“new 被调用者”的方式创建对象。这种方式增加调用者和被调用者之间的耦合性，不利于后期维护。</p><p>使用Spring后，对象的创建由Spring容器完成，Spring容器负责控制程序间的关系，使得控制权由调用者转移到Spring容器，控制器发生了反转。</p><p>举例加深理解：我想吃面包。当某个Java对象（调用者：我），调用另一个Java对象（被调用者：面包）时，在传统编程模式下：使用new方法（自己制作面包）；使用Spring：对象的实例（面包）由Spring容器（面包店）创建，Spring容器负责控制程序间的关系（面包店负责我与面包之间的关系）。</p><h3 id="DI：依赖注入"><a href="#DI：依赖注入" class="headerlink" title="DI：依赖注入"></a>DI：依赖注入</h3><p>Spring容器中，管理一系列的类，但调用者需要调用时，Spring容器负责将依赖对象赋值给调用者的成员变量，为调用者注入所依赖的实例。</p><p>举例：面包店给我需要的菠萝包。</p><p><img src="https://gitee.com/jiantian99/Images-Hosting/raw/master/img/20200809174012.png" srcset="./img/loading.gif" alt></p><p>综上所述，控制反转是一种通过描述（XML或者注解）并通过第三方产生或获取特定对象的方式。在Spring中，实现控制反转的是IOC容器，实现方法是DI（构造方法注入、setter方法注入、接口注入）。</p><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h3><ol><li>AOP即面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。</li><li>AOP是OOP（⾯向对象编程）的延续，是软件开发中的⼀个热点，也是Spring框架中的⼀个重要内<br>容，是函数式编程的⼀种衍⽣范型。</li><li>利⽤AOP可以对业务逻辑的各个部分进⾏隔离，从⽽使得业务逻辑各部分之间的耦合度降低，提⾼程<br>序的可重⽤性，同时提⾼了开发的效率。</li><li>AOP采取横向抽取机制，取代了传统纵向继承体系重复性代码。</li><li>作用：在程序运行期间，不修改源码对已有方法进行增强；</li><li>应用：事务管理、性能监视、安全检查、缓存、⽇志等。</li></ol><p>将公共的业务 (日志 , 安全等) 和领域业务结合起来 , 当执行领域业务时 , 将会把公共业务加进来 。实现公共业务的重复利用，领域业务更纯粹 ，其本质还是动态代理。</p><h3 id="AOP在Spring中的作用"><a href="#AOP在Spring中的作用" class="headerlink" title="AOP在Spring中的作用"></a>AOP在Spring中的作用</h3><p>提供声明式事务；允许用户自定义切面</p><p><img src="https://gitee.com/jiantian99/Images-Hosting/raw/master/img/20200809174228.png" srcset="./img/loading.gif" alt></p><p>常用术语：</p><ul><li>切面（ASPECT）：横切关注点被模块化的特殊对象，是切⼊点pointcut和通知advice的结合。即，它是一个类。</li><li>连接点（JointPoint）：与切入点匹配的执行点，指那些可能被拦截到的⽅法。</li><li>切入点（PointCut）：切面通知 执行的 “地点”的定义。例如：addUser()。</li><li>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。例如：before，after。</li><li>目标（Target）：目标类，被通知对象。例如：UserService</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li><li>织⼊（Weaving）：是指把增强advice应⽤到⽬标对象target，来创建新的代理对象proxy的过程。</li></ul><h2 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h2><p>事务就是把一系列的动作当成一个独立的工作单元，这些动作要么全部完成，要么全部不起作用。</p><h3 id="事务四大基本特性"><a href="#事务四大基本特性" class="headerlink" title="事务四大基本特性"></a>事务四大基本特性</h3><ol><li><p>原子性（atomicity）</p><ul><li>事务是原子性操作，由一系列动作组成，事务的原子性确保动作要么全部完成，要么完全不起作用。</li></ul></li><li><p>一致性（consistency）</p><ul><li>一旦所有事务动作完成，事务就要被提交。数据和资源处于一种满足业务规则的一致性状态中。</li></ul></li><li><p>隔离性（isolation）</p><ul><li>可能多个事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。</li></ul></li><li><p>持久性（durability）</p><ul><li>事务一旦完成，无论系统发生什么错误，结果都不会受到影响。通常情况下，事务的结果被写到持久化存储器中。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>后端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录使用Hexo的一些坑</title>
    <link href="./2020/07/29/%E6%8C%81%E7%BB%AD%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8Hexo%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
    <url>./2020/07/29/%E6%8C%81%E7%BB%AD%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8Hexo%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<p>本文主要记录使用<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>过程中遇到的一些坑。  </p><h2 id="Hexo使用Markdown图片无法显示问题"><a href="#Hexo使用Markdown图片无法显示问题" class="headerlink" title="Hexo使用Markdown图片无法显示问题"></a>Hexo使用Markdown图片无法显示问题</h2><p>最近在Hexo上写点东西，发现使用Markdown语法，插入本地图片，网页中无法显示。<br>网上查了下资料，发现Hexo默认无法自动处理文章插入本地图片，需要通过扩展插件支持。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li>安装上传本地图片的插件<br>在Hexo项目的根目录下输入<br><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></li><li>打开hexo目录下的配置文件_config.yml，修改配置<code>post_asset_folder: flase</code>为<br><code>post_asset_folder: true</code></li><li>本地图片相对路径引用<br>把图片放入source/_posts中文章同名的文件夹中，文章中使用相对路径引用图片<pre><code class="hljs markdown">![<span class="hljs-string">图片标题</span>](<span class="hljs-link">img.png</span>)   //假设图片名称为img.png</code></pre></li><li>本地图片绝对路径引用<br>在source文件夹中，建立存放图片的文件夹（images）<pre><code class="hljs markdown">![<span class="hljs-string">图片标题</span>](<span class="hljs-link">/images/img.png</span>)   //假设图片名称为img.png</code></pre></li><li>使用图床插入网络图片（推荐）<br>受限于服务器性能，若文章中图片过多，加载图片可能会慢。使用网络图床，可提升图片的加载速度。<pre><code class="hljs markdown">![<span class="hljs-string">图片标签</span>](<span class="hljs-link">网络图片地址</span>)</code></pre></li></ol>]]></content>
    
    
    <categories>
      
      <category>日常记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown学习笔记</title>
    <link href="./2020/07/26/Markdown-notes/"/>
    <url>./2020/07/26/Markdown-notes/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown学习笔记"><a href="#Markdown学习笔记" class="headerlink" title="Markdown学习笔记"></a>Markdown学习笔记</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><pre><code class="hljs clean"># 一级标题## 二级标题###### 六级标题</code></pre><h2 id="段落格式"><a href="#段落格式" class="headerlink" title="段落格式"></a>段落格式</h2><pre><code class="hljs plain">段落的换行  是使用两个以上空格加上回车</code></pre><p>段落的换行<br>是使用两个以上空格加上回车</p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><pre><code class="hljs asciidoc"><span class="hljs-strong">*斜体字*</span>*<span class="hljs-strong">*粗体*</span><span class="hljs-strong">*</span><span class="hljs-strong">*</span>*<span class="hljs-strong">*粗斜体*</span>*<span class="hljs-strong">*</span></code></pre><p><em>斜体字</em><br><strong>粗体</strong><br><strong><em>粗斜体</em></strong></p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>三个以上<code>*</code>、<code>-</code>、<code>_</code> 来建立分割线</p><pre><code class="hljs markdown"><span class="hljs-emphasis">***</span></code></pre><hr><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>两端加入<code>~~</code>实现删除线  </p><pre><code class="hljs haml">~~这是删除线~~</code></pre><p><del>这是删除线</del></p><h3 id="下划线文本"><a href="#下划线文本" class="headerlink" title="下划线文本"></a>下划线文本</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>这是下划线文本<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></code></pre><p><u>这是下划线文本</u></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>数字后接小数点.</p><pre><code class="hljs angelscript"><span class="hljs-number">1.</span> 第<span class="hljs-number">1</span>项<span class="hljs-number">2.</span> 第<span class="hljs-number">2</span>项<span class="hljs-number">3.</span> 第<span class="hljs-number">3</span>项</code></pre><ol><li>第1项</li><li>第2项</li><li>第3项<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3>使用*、-、_作为标记，标记后接空格，再填写内容<pre><code class="hljs angelscript">* 第<span class="hljs-number">1</span>项* 第<span class="hljs-number">2</span>项* 第<span class="hljs-number">3</span>项</code></pre></li></ol><ul><li>第1项</li><li>第2项</li><li>第3项<h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3>在需要嵌套的子列表前加入4个空格</li></ul><pre><code class="hljs markdown"><span class="hljs-bullet">* </span>第一项内容<span class="hljs-bullet">    1. </span>我是嵌套的子列表<span class="hljs-bullet">    2. </span>我是嵌套的子列表<span class="hljs-bullet">    3. </span>我是嵌套的子列表<span class="hljs-bullet">* </span>第二项内容<span class="hljs-bullet">    1. </span>子列表<span class="hljs-bullet">    2. </span>子列表<span class="hljs-bullet">    3. </span>子列表</code></pre><ul><li>第一项内容<ol><li>我是嵌套的子列表</li><li>我是嵌套的子列表</li><li>我是嵌套的子列表</li></ol></li><li>第二项内容<ol><li>子列表</li><li>子列表</li><li>子列表</li></ol></li></ul><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>使用```包裹，可以指定一种语言</p><p>```javascript<br>    alert(‘Hello World’);<br>```</p><pre><code class="hljs javascript">alert(<span class="hljs-string">'Hello World'</span>);</code></pre><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><pre><code class="hljs markdown">[<span class="hljs-string">链接名称</span>](<span class="hljs-link">链接地址</span>)或者<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">直接使用链接地址</span>&gt;</span></span>[<span class="hljs-string">bilibili</span>](<span class="hljs-link">https://www.bilibili.com/</span>)  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">https:</span>//<span class="hljs-attr">www.bilibili.com</span>/&gt;</span></span></code></pre><p><a href="https://www.bilibili.com/" target="_blank" rel="noopener">bilibili</a>  </p><p><a href="https://www.bilibili.com/" target="_blank" rel="noopener">https://www.bilibili.com/</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><pre><code class="hljs markdown">![<span class="hljs-string">alt 图片名称</span>](<span class="hljs-link">图片地址 "可选标题"</span>)</code></pre><p><img src="https://gitee.com/jiantian99/Images-Hosting/raw/master/img/20200809173354.png" srcset="./img/loading.gif" alt></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>使用<code>|</code>分割单元格，使用<code>-</code>分割表头与表格主体<br>| 表格对齐方式 |      |<br>| ———— | —- |<br>| 左对齐       | :–  |<br>| 居中对齐     | :–: |<br>| 右对齐       | –:  |</p><pre><code class="hljs gherkin">|<span class="hljs-string"> 表头1  </span>|<span class="hljs-string"> 表头2 </span>|<span class="hljs-string">  表头3 </span>||<span class="hljs-string"> :----- </span>|<span class="hljs-string"> :---: </span>|<span class="hljs-string"> -----: </span>||<span class="hljs-string"> 左对齐 </span>|<span class="hljs-string"> 居中  </span>|<span class="hljs-string"> 右对齐 </span>||<span class="hljs-string"> 内容1  </span>|<span class="hljs-string"> 内容2 </span>|<span class="hljs-string">  内容3 </span>|</code></pre><table><thead><tr><th align="left">表头1</th><th align="center">表头2</th><th align="right">表头3</th></tr></thead><tbody><tr><td align="left">左对齐</td><td align="center">居中</td><td align="right">右对齐</td></tr><tr><td align="left">内容1</td><td align="center">内容2</td><td align="right">内容3</td></tr></tbody></table><h2 id="Markdown高级"><a href="#Markdown高级" class="headerlink" title="Markdown高级"></a>Markdown高级</h2><h3 id="支持HTML"><a href="#支持HTML" class="headerlink" title="支持HTML"></a>支持HTML</h3><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML </p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>i标签<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span></code></pre><p><i>i标签</i></p><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>使用反斜杠<code>\</code>转义特殊字符</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
